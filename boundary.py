
def imposeUBCs(U, comm):
    rank = comm.Get_rank()
    procs = comm.Get_size()

    if rank == 0:
        U[0, :, :] = -U[1, :, :]
        U[:, 0, :] = -U[:, 1, :] 
        U[:, :, 0] = -U[:, :, 1]
    
    if rank == procs-1:
        U[-1, :, :] = -U[-2, :, :]
        U[:, -1, :] = -U[:, -2, :]
        U[:, :, -1] = -U[:, :, -2]
    
    # U[0, :, :], U[-1, :, :] = -U[1, :, :], -U[-2, :, :]
    # U[:, 0, :], U[:, -1, :] = -U[:, 1, :], -U[:, -2, :]
    # U[:, :, 0], U[:, :, -1] = -U[:, :, 1], -U[:, :, -2]

def imposeVBCs(V, comm):
    rank = comm.Get_rank()
    procs = comm.Get_size()

    if rank == 0:
        V[0, :, :] = -V[1, :, :]
        V[:, 0, :] = -V[:, 1, :] 
        V[:, :, 0] = -V[:, :, 1]
    
    if rank == procs-1:
        V[-1, :, :] = -V[-2, :, :]
        V[:, -1, :] = -V[:, -2, :]
        V[:, :, -1] = -V[:, :, -2]

    # V[0, :, :], V[-1, :, :] = -V[1, :, :], -V[-2, :, :]
    # V[:, 0, :], V[:, -1, :] = -V[:, 1, :], -V[:, -2, :]
    # V[:, :, 0], V[:, :, -1] = -V[:, :, 1], -V[:, :, -2]

def imposeWBCs(W, comm):
    rank = comm.Get_rank()
    procs = comm.Get_size()

    if rank == 0:
        W[0, :, :] = -W[1, :, :]
        W[:, 0, :] = -W[:, 1, :] 
        W[:, :, 0] = -W[:, :, 1]
    
    if rank == procs-1:
        W[-1, :, :] = -W[-2, :, :]
        W[:, -1, :] = -W[:, -2, :]
        W[:, :, -1] = -W[:, :, -2]
    
    # W[0, :, :], W[-1, :, :] = -W[1, :, :], -W[-2, :, :]
    # W[:, 0, :], W[:, -1, :] = -W[:, 1, :], -W[:, -2, :]
    # W[:, :, 0], W[:, :, -1] = -W[:, :, 1], -W[:, :, -2]

def imposePBCs(P, comm):
    rank = comm.Get_rank()
    procs = comm.Get_size()

    if rank == 0:
        P[0, :, :] = -P[1, :, :]
        P[:, 0, :] = -P[:, 1, :] 
        P[:, :, 0] = -P[:, :, 1]
    
    if rank == procs-1:
        P[-1, :, :] = -P[-2, :, :]
        P[:, -1, :] = -P[:, -2, :]
        P[:, :, -1] = -P[:, :, -2]

    # P[0, :, :], P[-1, :, :] = P[1, :, :], P[-2, :, :]
    # P[:, 0, :], P[:, -1, :] = P[:, 1, :], P[:, -2, :]
    # P[:, :, 0], P[:, :, -1] = P[:, :, 1], P[:, :, -2]

def imposePpBCs(Pp, comm):
    rank = comm.Get_rank()
    procs = comm.Get_size()

    if rank == 0:
        Pp[0, :, :] = -Pp[1, :, :]
        Pp[:, 0, :] = -Pp[:, 1, :] 
        Pp[:, :, 0] = -Pp[:, :, 1]
    
    if rank == procs-1:
        Pp[-1, :, :] = -Pp[-2, :, :]
        Pp[:, -1, :] = -Pp[:, -2, :]
        Pp[:, :, -1] = -Pp[:, :, -2]
    
    # Pp[0, :, :], Pp[-1, :, :] = Pp[1, :, :], Pp[-2, :, :]
    # Pp[:, 0, :], Pp[:, -1, :] = Pp[:, 1, :], Pp[:, -2, :]
    # Pp[:, :, 0], Pp[:, :, -1] = Pp[:, :, 1], Pp[:, :, -2]        

